// Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
  

public:
    ListNode* deleteDuplicates(ListNode* head) {
       ListNode * temp = head; // create a pointer to the head of the list

      while(temp){
          if(temp->next == nullptr){  // if the node temp is pointer to is the last node, return head
              return head;
          }

           while(temp->next && (temp->val == temp->next->val)){  // while temp has a next and the value of temp is the same as the node after temp
               temp->next = temp->next->next;  // temp's next now pointes to the node after temps original next
           }
          temp = temp->next;
      }   
      return head;
    }
};
