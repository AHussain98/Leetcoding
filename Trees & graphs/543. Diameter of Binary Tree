Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    // remember the diameter is the length of the longest path between any two trees
    // diameter is therefore nothing but the maximum of (left height + right height + 1) for a node, update this value for every node
    // the return value is the height of the tree for a node
public:
    int ans = 0;  // global variable

    int height(TreeNode * root){
       if(!root){return 0;}  // base case
       int lHeight = height(root->left);  // we have to go left and right
       int rHeight = height(root->right);
       ans = max(ans, rHeight + lHeight);  // This is ultimately what we'll be returning, we're always trying to get the maximum
       return 1 + max(lHeight, rHeight);  // this is used when we're comparing two branches, add one to the current level
    }

    int diameterOfBinaryTree(TreeNode* root) {
        if(!root){return 0;}
        height(root);  // what we're returning here doesn't matter
        return ans;  // we're actually going to return this
    }
};
