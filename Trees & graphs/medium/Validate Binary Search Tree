Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
vector<int> nodes;
    bool isValidBST(TreeNode* root) {
        // so right child's value should be more than parent and left child should be less
        // this should perpetuate through
        // both left and right subtrees must also be binary search trees, so the higher nodes must still be respected

        // how would I store the results of the higher up nodes? 
        // lets create a vector to store nodes via inorder traversal method, as we know that each parent must have a smaller left node and larger right node
        if(root == nullptr){return true;}
        inOrderSearch(root);

        // here we will search through the vector and verify it's correct
        for(int i = 1; i < nodes.size(); ++i){
            if (nodes[i] <= nodes[i-1]){return false;}
        }
        return true;
        
    }

    void inOrderSearch(TreeNode* root){// void as we don't need to return anything
         // so imagine we'ew starting at the leaf node at the bottom, if the root node is null then just return
         if(root == nullptr){return;}
         // now we can think about populating the vector
         inOrderSearch(root->left);
         // this will start that the lowest value node, which is perfect because we can use its value to compare with its parent and right pointer to verify the tree is valid
         nodes.push_back(root->val);
         inOrderSearch(root->right);  // this way, the vector filling pattern is left, root, right, which should have increasing values

    }
};

For the recursive solution, we set a lower bound and a upper bound for the tree. When we recurse on the left subtree, the upper bound becomes the value of its root. When we recurse on the right subtree, the lower bound becomes the value of its root.

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return valid(root, LONG_MIN, LONG_MAX);
    }
private:
    bool valid(TreeNode* root, long min, long max) {
        if (!root) {
            return true;
        }
        if (root -> val <= min || root -> val >= max) {
            return false;
        }
        return valid(root -> left, min, root -> val) && valid(root -> right, root -> val, max);
    }
};
Note we use LONG_MIN and LONG_MAX to handle edge cases like [INT_MAX].

The iterative idea is to apply iterative inorder traversal to the tree and check whether the current value is always larger than the previous one.

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        long pre = LONG_MIN;
        stack<TreeNode*> todo;
        while (root || !todo.empty()) {
            while (root) {
                todo.push(root);
                root = root -> left;
            }
            root = todo.top();
            todo.pop();
            if (root -> val <= pre) {
                return false;
            }
            pre = root -> val;
            root = root -> right;
        }
        return true;
    }
};
