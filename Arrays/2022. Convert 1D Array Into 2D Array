You are given a 0-indexed 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with  m rows and n columns using all the elements from original.

The elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2D array, and so on.

Return an m x n 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.


class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {
     if (n*m > original.size() || n*m < original.size()){
         return {};  // return an empty array
     }

        std::vector<std::vector<int>> vec(m);
        int k = 0;  // use this to store where the index is along the original array
        for(int i = 0; i < m;++i){  // so this runs for each row
        std::vector<int> tmp(n);
            for(int j = 0; j < n; ++j){  // this runs for each column
                tmp[j] = original[k];
                k++; // move k along to get the next element in original
            }
            vec[i] = tmp;  // use indexing instead of pushback, as push_back will automatically double the size of the vector when it gets full
        }
        return vec;
    }
};
