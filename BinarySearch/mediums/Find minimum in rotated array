Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.


class Solution {
public:
    int findMin(vector<int>& nums) {
        // the minimum in a rotated sorted array will be the point of inflexion, where the array is rotated by
        // first we find the middle element
        // if the middle element is greater than the first element, we need to look for the inflexion point on the right of mid
        // if the middle element is smaller than the first element, we need to look for the inflexion point on the left of mid
        // we know we've found our inflexion point when low becomes greater than high

        int n = nums.size();
        int begin = 0;
        int end = n -1;
        while (begin < end){
            if(nums[begin] <= nums[end]){return nums[begin];}
            int mid = begin + (end - begin)/2;
            if(nums[begin] > nums[mid]){
                 end = mid;
            }
            else if(nums[end] < nums[mid] ){// remove the left hand side
            begin = mid + 1;}  // move the starting pointer up
        }

        return nums[begin];
    }
};
