Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).

class NumArray {
// we need to create a private member array of the NumArray class
private:
std::vector<int> Vec;

public:
    NumArray(vector<int>& nums) { // constructor
        // in here, we'll use the array that's passed in to populate the Vec member vector with accumulated values
        Vec.push_back(0); // initial value
        for(auto i : nums){
            Vec.push_back(Vec.back() + i);
        }
    }
    
    int sumRange(int left, int right) {
        return Vec[right+1] - Vec[left]; // minusing these will give us the sums inclusive of these positions
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(left,right);
 */
