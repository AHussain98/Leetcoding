Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.






class Solution {
public:
    void sortColors(vector<int>& nums) {
        // most naive solution would be to just sort the nums vector, this is nlogn
        // better solution is to run through the array and keep count of the number of 0's,1's,2's and then go through and insert the correct number of each in the corresponding cells, this is a O(2n) solution
        // even better would be to do it in one pass, which we can do with a two pointer solution

        int n = nums.size();
        int hi = n-1;
        int lo = 0;
        int mid = 0;


        while(mid <= hi){
         if(nums[mid] == 0){
             swap(nums[mid],nums[lo]); // swap the middle and low values, as we know low must always be behind or equal to mid
             lo++; // and then increase lo and mid
             mid++;
         }
         else if(nums[mid] == 1){
             // the middle values should be 1 anyways, so we can just move mid along
             mid++;
         }
         else{  // or else the value pointed to by mid is 2, so we can swap with hi and then move hi down
         // as we know 2 should always be at the end

         swap(nums[hi],nums[mid]);
         hi--;

         }






        }
    }
};



// 2(N) solution:
/*class Solution {
public:
    void sortColors(vector<int>& nums) {
        int count0 = 0;
        int count1 = 0; 
        int count2  = 0;
        for(int i =0; i< nums.size(); i++){
            if(nums[i] == 0){
                count0++;
            }else if (nums[i] == 1){
                count1++;
            }else if (nums[i] ==2 ){
                count2++;
            }
            
         }
        for(int i =0; i< count0; i++){
            nums[i] =0;
        }
        for(int i =count0; i< (count1 + count0); i++){
            nums[i] =1;
        }
        for(int i =(count1 + count0); i< nums.size(); i++){
            nums[i] =2;
        }
        
    }
};   */
