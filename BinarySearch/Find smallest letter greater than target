You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.

Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.

class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
     // firstly, if the largest element is smaller or the same as the target, then we can just return the first
     if(letters.back() <= target){ return letters.front();}

     int low = 0;
     int high = letters.size() -1;

     while (low <= high){  // with these types of loops, we don't need to return anything within the loop, we just need to find teh index where the element would go and return the element low is pointer to at the point it becomes greater than high
         int mid = (high + low)/2;

         if(letters[mid] > target){
             high = mid - 1;
         }
         else{ low = mid + 1;}  // put low at the bottom, because we need low to exceed high for the smallest element greater than target, low and high must be equal and we need low to be the last one to move
     }
     return letters[low];

    }
};
