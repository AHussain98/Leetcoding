Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.


class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
      // if we're replacing elements in an array, we can use a two pointer approach, especially as this array is sorted
      // one pointer for running through each element in the array
      // another pointer for tracking the spots where we need a replacement
int n = nums.size();
      int b = 0;
      for(int a = 1; a < n; a++){  //so for every element in the array
          if(nums[a] != nums[b]){
              b++; //move b along
              nums[b] = nums[a];
          }
      }

      return b+1;  // b is zero indexed so the number of unique elements is wherever b ends up plus 1 

    }
};
