Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        // O(N) time complexity, dynamic programming with O(N) space
         // we can do this by storing the products of the sums of elements to the left and elements to the right of an element in nums in seperate vectors, then multiplying them

      int n = nums.size();
      std::vector<int> ans(n); // these vectors need to be of size n
      std::vector<int> left_products(n);
      std::vector<int> right_products(n);
      left_products[0] = 1; // need this for multiplication
      for(int i = 1 ; i < n; ++i){
      left_products[i] = left_products[i-1] * nums[i-1];
      }
      // now we can do the same for the right products
      right_products[n-1] = 1;
      for(int i = n-2; i >= 0; i--){
          right_products[i] = right_products[i+1] * nums[i+1];
      }  

      for(int i = 0; i < n; ++i){
          ans[i] = left_products[i] * right_products[i];
      }
      return ans;
    }
};
