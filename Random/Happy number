Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

class Solution {
public:
    bool isHappy(int n) {
        
        std::unordered_set<int> set;  // must be unique

        while( n != 1){  // not equal to one, since that's what we're searching for
        if(set.find(n) == set.end()){
            set.insert(n);
        }
        else {return false;} // so we've encountered a loop, return false
        
        int sum = 0; // this needs to be out of the loop

        while (n != 0){  // so while n has digits
        sum +=  pow((n%10), 2); // square the last digit of n and add it to the sum 
        n = n/10;  // reduce n by one digit
        }
        n = sum;  // make n equal to the sum and restart the loop, if n is 1, then the loop breaks
        }
        
        return true;
    }
};

// can also be solved by a cycle detection algorithm

