You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.

You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:

You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.
Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.
Once you reach a tree with fruit that cannot fit in your baskets, you must stop.
Given the integer array fruits, return the maximum number of fruits you can pick.


class Solution {
public:
    int totalFruit(vector<int>& fruits) {
        // sliding window problem
        // we can only pick two fruits at a time
        // we can start from any tree we want
        // we can take a map and store elements in it one by one, and check if the size of the map becomes more than 2. 
        // essentially, we're looking for the longest subarray consisting of at most 2 elements

        unordered_map<int,int> map; // map to store the elements

        int n = fruits.size();
        int l = 0; int r = 0; int maximum = 0; int count = 0;
        while(r < n){
                map[fruits[r]]++;  // add one to the count of the current fruit
                r++; // move the right pointer along
            

            while((l < r)  && map.size() > 2){  // whilw we have more than  the maximum of two allows fruits
                map[fruits[l]]--;  // lower the count of teh element l is pointing to, as we now have too many elements
                if (map[fruits[l]] == 0){map.erase(fruits[l]);}  // if the element current pointewd to by l is now zero, we can remove it from the map
                l++;  // move the l pointer along
            }

            maximum = max(maximum, (r-l));  // max number of elements may have changed between what it was previoulsy and the gap between r and l, which is always changing
        }

        return maximum;

    }
};
