Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.


class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
      // distinct integers, so if we move across, we should not repeat ourselves  
      // this is a straightforward backtracking problem
      vector<vector<int>> result;
      permutation(nums, result, 0, nums.size()-1);
      return result;
    }

    void permutation(vector<int>& nums, vector<vector<int>>& result, int start, int end){

     if(start == end){
         result.push_back( nums);
         return;
     }
     for(int j = start; j <= end; j++){
         swap(nums[start],nums[j]);
         permutation(nums,result,start+1,end);
         swap(nums[start],nums[j]);
     }

    }


};
