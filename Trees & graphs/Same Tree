Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.


// can also be solved recursively, but that is o(n) space

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
       // we can solve this recursively and iteratively
        // iterative solution using queue
        std::queue<TreeNode *> queue;
        queue.push(p);
        queue.push(q);
        // we start by pushing the two root nodes
        while(!queue.empty()){
       // while the queue is not empty, we take the values stored in the queue and compare them, after we've popped the elements
       TreeNode * one = queue.front();
       queue.pop();
       TreeNode * two = queue.front();
       queue.pop();

       if(one == nullptr && two == nullptr){
           continue;
       }
       if(one == nullptr || two == nullptr){ // if two pointers pass the above check, this one will catch them if only one is null
           return false;
       }
       if(one -> val != two -> val){
           return false;
       }
        queue.push(one -> left);
        queue.push(two -> left);
        queue.push(one -> right);
        queue.push(two -> right);
                }
                return true;
    }
};
