Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {

        // lets try solving with a stack to work out if the tree is symmetric
        std::stack<TreeNode *> stack;
        stack.push(root->left);
        stack.push(root -> right);
        //push on the left and right pointers   
        while(!stack.empty()){
            TreeNode * leftSide = stack.top();
            stack.pop();
            TreeNode * rightSide = stack.top();
            stack.pop();

            if(!leftSide && !rightSide){
                continue; // both are not legitimate nodes, which is acceptable
            }
            if(!leftSide || !rightSide){
                return false;
            } // if we get to this point, then one of the nodes is legit and nother is not, so we can return false

            if(leftSide -> val != rightSide -> val){
                return false;
            }
            stack.push(leftSide -> left);
            stack.push(rightSide -> right);
            stack.push(leftSide -> right);
            stack.push(rightSide -> left);


        }
        // if we get to this point, all elements are symettrical, so we can just return true

        return true;
    }
};
