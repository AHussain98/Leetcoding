Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode * p, TreeNode * q){
        if(!p && !q){return true;} // base case, we have to get to the bottom to be a complete subtree
        if(!p || !q){return false;}
        if(p->val != q->val){return false;} // if the values are the same, then continue
        bool left = isSameTree(p->left, q->left);
        bool right = isSameTree(p->right, q->right);
        return left && right; // and because both subtrees need to be correct
    }

    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(!root){
            return false;
        }
        if(isSameTree(root, subRoot)){return true;} // try it for the original node, and then for its children
        bool left = isSubtree(root->left,subRoot); // we want to run the same subtree check for every possible node
        bool right = isSubtree(root->right, subRoot);
        return left || right; // or because we only need one subtree to be correct
    }
};
