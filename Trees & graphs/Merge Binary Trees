You are given two binary trees root1 and root2.

Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.

Return the merged tree.

Note: The merging process must start from the root nodes of both trees.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        // we can solve this recursively or iteratively using a queue
        if(!root1 && !root2){
            return nullptr;
        }
        if(!root1 || !root2){
            return root1 ? root1 : root2;
        }// if one of the trees is NULL, just return the other one
        std::queue<TreeNode*> queue1;
        std::queue<TreeNode*> queue2; // create two queues
        queue1.push(root1);
        queue2.push(root2);
      while(!queue1.empty() && !queue2.empty()){
          TreeNode * node1 = queue1.front(); // we're going to use these pointers to move arounf both trees
          TreeNode * node2 = queue2.front();
          queue1.pop();
          queue2.pop();
          // store the values at the front of each queue and pop them
          node1->val += node2->val; // add the value of node2's value onto node 1's
          if(!node1->left && node2->left){
              node1->left = node2->left;
          } // if there are no more nodes on the left of node1, then just made the left of node1 equal to the left of node2
          else if(node1->left && node2->left){queue1.push(node1->left);queue2.push(node2->left);}

          // now do same for right
          if(!node1->right && node2->right){
              node1->right = node2->right;
          }
          else if(node1->right && node2->right){queue1.push(node1->right);queue2.push(node2->right);}
      
      }

     // now we've updated the t1 tree that was passed in
     // so just return that
     return root1;
    }
};
