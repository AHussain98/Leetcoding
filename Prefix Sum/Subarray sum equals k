Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.



class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        // this can have negative values so we can't do sliding window
        // we can solve this with an adapted prefix sum
    std::unordered_map<int,int> map; // map to store the sum values at each index
    int sum = 0;
    int ans = 0;
    // we use a hashmap to store the prefix sum count
    // we traverse through the array, adding elements to the sum and checking if the sum is equal to k
    // we also check if the gap between any two elements is equal to k, in which case we can add that to the sum aswell, as thats a subarray
    for(int i = 0; i < nums.size(); ++i){

        sum += nums[i];

        if(sum == k){
            ans++;}

        if(map.find(sum - k)  !=  map.end()){  // if the gap between sum at current index and k exists elsewhere
           // ans++;  this doesnt work with a testcase of all 0's and k as 0
           ans += map[sum-k];  // this compensates
        } 
        map[sum]++;   
    }

    return ans;
        
    }
};

//  we make use of a hashmap mapmapmap which is used to store the cumulative sum up to all the indices possible along with the number of times the same sum occurs. We store the data in the form: (sumi,no.ofoccurrencesofsumi)(sum_i, no. of occurrences of sum_i)(sum 
 ,no.ofoccurrencesofsum ). We traverse over the array numsnumsnums and keep on finding the cumulative sum. Every time we encounter a new sum, we make a new entry in the hashmap corresponding to that sum. If the same sum occurs again, we increment the count corresponding to that sum in the hashmap.
 Further, for every sum encountered, we also determine the number of times the sum sum−ksum-ksum−k has occurred already, since it will determine the number of times a subarray with sum kkk has occurred up to the current index. We increment the countcountcount by the same amount.

// brute force solution
// // public class Solution {
//     public int subarraySum(int[] nums, int k) {
//         int count = 0;
//         for (int start = 0; start < nums.length; start++) {
//             for (int end = start + 1; end <= nums.length; end++) {
//                 int sum = 0;
//                 for (int i = start; i < end; i++)
//                     sum += nums[i];
//                 if (sum == k)
//                     count++;
//             }
//         }
//         return count;
//     }
// }
