// same as before but now with duplicates

There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

// the trick to this question is that if the start and end values are the same as the one in the middle, we need to move the start pointer up and end pointer down
// do this until they're not the same


class Solution {
public:
    int search(vector<int>& nums, int target) {
        // start by finding the middle index
        // if the key is present in the middle, return the middle index
        // if the left half is sorted and the element is in the left haf, move the end down to mid-1 and search again
        // do the same if the right half is sorted
        // else if the target is in the unsorted half, move up the beginning 

        int begin = 0;
        int end = nums.size() -1;
        while(begin <= end){
            int mid = begin + (end-begin)/2;
            if(nums[mid] == target){  // if we find the target, return the middle index, do this first
                return true;
            }
            if(nums[mid] == nums[begin]  && nums[mid] == nums[end]){
                begin++;
                end--;
            }
         

            else if(nums[begin] <= nums[mid]){
                // so if the left half is sorted
                if(target < nums[mid] && target >= nums[begin]){ // if the target lies in the sorted left half, move end down
                end = mid -1;

                }
                else{ // if the target is not in the sorted half
                begin = mid + 1;}
            }

            // now if the right half is sorted
            else{
                if(target > nums[mid] && target <= nums[end]){
                    // if target is greater than mid but less than the end, so if it lies in the right half
                    begin = mid + 1;
                }
                else{
                  // if the right half is sorted but the target is in the unsorted left half
                  end = mid - 1;                    
                }
            }
        }
        return false; // the while loop ended and we didnt find the element so just return -1
    }
};
