Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

// we can solve with via a breadth first search
    int minDepth(TreeNode* root) {
        if(!root){return 0;}

        std::queue<TreeNode *> queue;
        int level = 0; // we'll use this to store the minimum depth
        queue.push(root);
        while(!queue.empty()){
         int breadth = queue.size();
         level++;
         for(int i = 0; i < breadth; ++i){  // for every node on the same level
             TreeNode * parent = queue.front();
             queue.pop();
             if(parent -> left){
                 queue.push(parent->left);
             }
             if(parent -> right){
                 queue.push(parent -> right);
             }
             if(!parent->left && !parent->right){
                 return level;  // when we get to the firt leaf node, we'll return the level
             }
         }

        }
    return level;
    }

};
