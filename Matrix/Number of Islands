

// DFS solution
class Solution {
public:

    void DFS(vector<vector<char>>& grid, int i, int j){
        // check the boundaries
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()){
            return;
        }
        // return if current position is water or is already visited
        if(grid[i][j] == '2' || grid[i][j] == '0'){
            return;
        }
        // mark the current cell as visited
        grid[i][j] = '2';

        // now do DFS in all 4 directions
        DFS(grid, i+1, j);
        DFS(grid, i, j-1);
        DFS(grid, i-1, j);
        DFS(grid, i, j+1);
    }

    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(); // number of rows
        int m = grid[0].size(); // number of columns

        int num = 0; // number of islands

        // if there's a zero to the right and below a 1, then it must be an island
        // so lets go through and count the number of times that this occurs
        // any 1's on a boundary are automatically an island
        // this can actually be efficiently soved using BFS or DFS

        for(int i = 0; i < n; ++i){  // start from the first column
            for(int j = 0; j < m; ++j){
            // if we find a 1, do DFS
            if(grid[i][j] == '1'){
                DFS(grid,i,j);
                ++num;
            }
            }
        }
    

    return num;

}
};

BFS solution
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        if(n==0)
            return 0;
        int m=grid[0].size();
        
        stack<pair<int,int>>s;
        int count=0;
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                if(grid[i][j]=='1'){ // not visited, once visited or not land grid[i][j]="0"
                    ++count;// also increment count of islands
                    s.push(make_pair(i,j));

                    while(!s.empty()){
                        
                        int x=s.top().first;
                        int y=s.top().second;
                        s.pop();
                        
                        grid[x][y]='0';// visit

                        //move right
                        if(y+1<m && grid[x][y+1]=='1')
                            s.push(make_pair(x,y+1));
                        
                        // move down
                        if(x+1<n && grid[x+1][y]=='1')
                            s.push(make_pair(x+1,y));
                        
                        // move up
                        if(x-1>=0 && grid[x-1][y]=='1')
                            s.push(make_pair(x-1,y));
                        
                        // move left
                        if(y-1>=0 && grid[x][y-1]=='1')
                            s.push(make_pair(x,y-1));
    
                    }
                }
            }
        }
        
        return count;
    }
};
