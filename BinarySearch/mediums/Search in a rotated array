There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

class Solution {
public:
    int search(vector<int>& nums, int target) {
        // start by finding the middle index
        // if the key is present in the middle, return the middle index
        // if the left half is sorted and the element is in the left haf, move the end down to mid-1 and search again
        // do the same if the right half is sorted
        // else if the target is in the unsorted half, move up the beginning 

        int begin = 0;
        int end = nums.size() -1;
        while(begin <= end){
            int mid = begin + (end-begin)/2;
            if(nums[mid] == target){  // if we find the target, return the middle index
                return mid;
            }

            if(nums[begin] <= nums[mid]){
                // so if the left half is sorted
                if(target <= nums[mid] && target >= nums[begin]){ // if the target lies in the sorted left half, move end down
                end = mid -1;

                }
                else{ // if the target is not in the sorted half
                begin = mid + 1;}
            }

            // now if the right half is sorted
            else{
                if(target >= nums[mid] && target <= nums[end]){
                    // if target is greater than mid but less than the end, so if it lies in the right half
                    begin = mid + 1;
                }
                else{
                  // if the right half is sorted but the target is in the unsorted left half
                  end = mid - 1;                    
                }
            }
        }
        return -1; // the while loop ended and we didnt find the element so just return -1
    }
};
