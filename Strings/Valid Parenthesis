Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

#include <stack>

class Solution {
public:
    bool isValid(string s) {

      if(s.size() == 1 || s.size() == 0){
          return false;
      }

     int n = s.size() -1;
     std::stack<char> st;

      for(int i = 0; i <= n ; i++){

        if(s[i] == '[' || s[i] == '{' || s[i] == '('){
            st.push(s[i]);
        }
        else{    if(s[i] == ')'){
            if (st.empty() || st.top() !='('){  return false;}
            else {st.pop();}
             }  
         if(s[i] == ']'){
            if (st.empty() || st.top() != '['){  return false;}
            else {st.pop();}
        } 
          if(s[i] == '}'){
            if (st.empty() || st.top() != '{'){  return false;}
            else {st.pop();}
        } 
        }
      
    }
    if(!st.empty()){
        return false;
    }
    return true;
    }
};
