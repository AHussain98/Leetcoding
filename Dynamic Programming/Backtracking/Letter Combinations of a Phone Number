Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


class Solution {
public:
    vector<string> letterCombinations(string digits) {
        // all possible letter combinations

        if(digits.empty()){
            return {};
        }

        // create a vector with a mapping of digits to indexes
        std::vector<std::string> pad {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        // now create a vector of strings for output
        std::vector<std::string> output;
        std::string temp; // temp string to be passed into the helper function
        letterCombinations(digits, output, temp, pad, 0);
        return output;
    }

    void letterCombinations(string digits, vector<string>& output, string& temp, vector<string>& pad, int index){

      if(index == digits.size()){
          output.push_back(temp); // when we reach the required size, we can add the string into our answer
          return;
      }

      std::string value = pad[digits[index] - '0']; // remmeber that using - '0' on a char converts it to its integer form
      for(int i = 0; i < value.size(); ++i){
          temp.push_back(value[i]); // push that particular char back onto temp
          letterCombinations(digits, output, temp, pad, index + 1); // now recursively call the function for every value 
          temp.pop_back(); // when the function returns here, we need to continue from before the recusive call, so remove what was added
      }  

       }


};
