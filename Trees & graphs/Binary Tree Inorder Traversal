Given the root of a binary tree, return the inorder traversal of its nodes' values.


// remember that inorder traversal means left node, then root, then right node

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode * root, vector<int>& Inorder_result){
    if(!root){
        return;
    }
    inorder(root -> left, Inorder_result);
    Inorder_result.push_back(root->val);
    inorder(root->right, Inorder_result);

    }

    
    vector<int> inorderTraversal(TreeNode* root) {
        std::vector<int> Inorder_result;
        inorder(root, Inorder_result);
        return Inorder_result;
    }
};
