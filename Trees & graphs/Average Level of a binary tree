Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.


 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
 
std::vector<double> ans; // vector to store the averages
std::queue<TreeNode*> q;
long long sum = 0, count = 0;
q.push(root); // start by pushing on the root node
q.push(NULL); // to mark the end of a level

while(q.size()){ // while the queue has some size
TreeNode * curr = q.front(); // take the node at the front of the queue
q.pop();  // remove the element we just stored in curr from the queue
if(!curr){ // if there are no more nodes on this level, if curr is NULL
ans.push_back((double)sum/count); // push in the average
sum = 0; count = 0; // reset sum and count
q.push(NULL); // push this onto the back of the queue, this only happens when we come accross a null node, so at the end of a level, this ensures we ccalculate the sum at the end of a level
if(!q.front()) {break;} // if this is the last node, and the front of the queue is now null, we can break the loop
  
}
else{ // so if the value at the front of the queue is a legitimate node
count++;
sum+= curr->val;
if(curr->left){q.push(curr->left);}
if(curr->right){q.push(curr->right);}
// if the current node has valid left and right nodes, push them onto the end of the queue
}

}

return ans;



    }
};
