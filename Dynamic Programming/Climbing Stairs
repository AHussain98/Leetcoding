You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?


class Solution {
public:
    int climbStairs(int n) {
        // store the results of the overlapping subproblem in a vector
        // we can also solve recursively but this is not efficient

        // this is the same as the fibonacci sequence essentially
        if(n <= 2){return n;}
        std::vector<int> dp(n+1); // plus 1 because we're including n = 0
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i <=n; ++i){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};
