Given the root of a binary tree, invert the tree, and return its root.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

// invert means to essentially mirror the elements, we could do this with a queue to do it iteratively or via DFS recursion
    TreeNode* invertTree(TreeNode* root) {
        if(root == NULL){
            return NULL;
        }
        TreeNode * right = invertTree(root->right); // this then propagates down to the base case, where the root is simply returned
        TreeNode * left = invertTree(root->left);
        root->left = right;  // now just swap what the root nodes left and right pointers point to
        root->right = left;
        return root;
    }
};
