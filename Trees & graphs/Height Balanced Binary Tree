Given a binary tree, determine if it is height-balanced

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    // we're going to use a similar bottom up recursive solution as we used for finding the maximum diameter
    // create global variable ans
    bool ans = true;
public:

    int checkBalance(TreeNode * root){  // we're not actually going to use the returned int value here in our answer but we need it for recursion
    if(!root){return 0;}
    if(!ans){return 0;} // if the false flasg has already been set, just return 0, don't go through with any further unnecessary recursion
    int leftSubTree = checkBalance(root->left); 
    int rightSubTree = checkBalance(root->right);
    if(abs(leftSubTree - rightSubTree) > 1){ans = false;} // abs because either one could be larger, so the result of minusing them could be positive or negative
    return 1 + max(leftSubTree,rightSubTree); //whichever is larger will be the one returned, plus one for the current level



    }

    bool isBalanced(TreeNode* root) {
        checkBalance(root);
        return ans;
    }
};
