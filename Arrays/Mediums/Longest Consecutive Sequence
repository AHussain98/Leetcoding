Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.


class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
     // naive solution would be to sort the array and then count linearly

    // the optimised solution is to use a hashSet 

    unordered_set<int> set; // create the set
    for(int num: nums){
        set.insert(num); // so initially we want to insert all the elements into a hashset, they'll only have one entry per element
    }  
    int longestConsecutiveSequence = 0;
    // create an int to store the longest consecutive sequence
    for(int num : nums){
        if(set.find(num-1) == set.end()){
            // so if we can't find the preceeding number in the set, then this is potentially the start of a consectutive sequence
            int currentNumber = num;
            int currentConsecutiveSequence = 1;
            while(set.find(currentNumber+1) != set.end()){ // a while loop within the if statement, which triggers while we have a consecutive element in the set for the current array element
            currentNumber++;
            currentConsecutiveSequence++;

            }
            // at this point, we've found the longest sequence for a particular number
            longestConsecutiveSequence = max(longestConsecutiveSequence,currentConsecutiveSequence);
            // use the max statement to find the longest subsequence
        }
         
    }  
    return longestConsecutiveSequence;
    }
};

/* 
  Time Complexity : O(N), Although the time complexity appears to be quadratic due to the while loop nested
    within the for loop, closer inspection reveals it to be linear. Because the while loop is reached only when
    marks the beginning of a sequence (i.e. currentNumber-1 is not present in nums), the while loop can only run
    for N iterations throughout the entire runtime of the algorithm. This means that despite looking like O(N^2)
    complexity, the nested loops actually run in O(N+N)=O(N) time. All other computations occur in constant
    time, so the overall runtime is linear. Where N is the size of the Array(nums).

    Space Complexity : O(N), Unordered set space.

    Solved using Array + Hash Table(Unordered set). Optimise Approach.



  nlogn approach would be to sort the array and then just cycle through and check if the preceeding element exists in the sorted array and then add to the counter  */
