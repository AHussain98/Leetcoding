Given the root of a binary tree, return the preorder traversal of its nodes' values.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    //will solve via recursion again, this is O(n) time and O(n) space complexity
    // preorder traversal puts the root node first and then then the left and right children

public:
    // now lets create the function for the preorder traversal
    // it doesn't need to return anything, it just has to edit the nodes vector, so we should pass the vector by reference
    void preorder(TreeNode * root, std::vector<int>& nodes){
     if(!root){
         return;
     }
     
     nodes.push_back(root->val);
     preorder(root->left, nodes);
     preorder(root->right, nodes);
    }

    vector<int> preorderTraversal(TreeNode* root) {
     std::vector<int> nodes;
     preorder(root, nodes);
     return nodes;        
    }
};
