A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.


class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        // we can solve this via simple linear search, which would be O(N) time complexity
        // lets use a binary search approach since it asks for O(logN) and we can return any of them
        // in a standard binary search, we work on a sorted sequencew of numbers, We start off by finding the middle element, midmidmid from the given numsnumsnums array. If this element happens to be lying in a descending sequence of numbers. or a local falling slope(found by comparing nums[i]nums[i]nums[i] to its right neighbour), it means that the peak will always lie towards the left of this element. Thus, we reduce the search space to the left of midmidmid(including itself) and perform the same process on left subarray.

// If the middle element, midmidmid lies in an ascending sequence of numbers, or a rising slope(found by comparing nums[i]nums[i]nums[i] to its right neighbour), it obviously implies that the peak lies towards the right of this element. Thus, we reduce the search space to the right of midmidmid and perform the same process on the right subarray.

// In this way, we keep on reducing the search space till we eventually reach a state where only one element is remaining in the search space. This single element is the peak element.

// Any peak will lie in a sorted sequence. If current element is greater than its right neighbor, we can eliminate the right half of the array
//If it is less than the right neighbor, the left half can be eliminated Neighbors will never be equal.
// Thinking of binary search as a tool to eliminate half the array, helped me get a better handle on this problem.

int l = 0;
int r = nums.size() -1;

while(l < r){
    int mid = (l+r)/2;
    if(nums[mid] < nums[mid+1]){
        l = mid + 1;
    }
    else{ r = mid; }  // we have to make r equal to mid here, not equal to mid - 1
}
return l;




    }
};



/* class Solution {
public:
    int findPeakElement(vector<int>& v) {
        int n=v.size()-1;

        if(v.size()==1) return 0;
        if(v[0]>v[1]) return 0;
        if(v[n]>v[n-1]) return n;

        int low=1, high=v.size()-2, ans=0;

        while(low<=high){
            int mid=(low+high)/2;
            if(v[mid-1]<v[mid] && v[mid]>v[mid+1]){
                ans=mid;
                break;
            }
            if(v[mid-1]>v[mid]){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return ans;
    }
};   *?
