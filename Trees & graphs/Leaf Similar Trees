Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, std::vector<int>& vec){ // remember to pass by reference, and we don't need to return anything here
    if(!root){
        return; // base case
    }
    if(!root->left && !root->right){
        // so for a leaf node
        vec.push_back(root->val);
    }
    dfs(root->left,vec);
    dfs(root->right,vec);
}
    

    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        // lets create vectors to store the leaf node values of both trees
        std::vector<int> v1;
        std::vector<int> v2;

        // now call the dfs function for each tree
        dfs(root1,v1);
        dfs(root2,v2);

        // we just check whether or not the vectors are the same after we've called the dfs functions
        return v1 == v2;
    }
};
