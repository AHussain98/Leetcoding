Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        // create two pointers, a fast one and a slow one
        ListNode * fast = head;
        ListNode * slow = head;
        
        while(fast != nullptr && fast->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
            }
            return slow;
        
    }
};
